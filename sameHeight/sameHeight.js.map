{"version":3,"sources":["scripts/onboarding/common/directives/sameHeight.ts","scripts/onboarding/common/directives/sameHeight.js"],"names":[],"mappings":"AAAA;AAEA,QAAQ,OAAO;KACV,UAAU,cAAc,YAAA;IACrB,IAAI,aAAa;IACjB,IAAI;IAEJ,EAAE,QAAQ,OAAO;IAEjB,OAAO;QACH,UAAU;QACV,MAAM,YAAA;YACF;;;IAIR,SAAA,4BAAA;QACI,aAAa;QACb,UAAU,WAAW,kBAAkB;;IAG3C,SAAA,mBAAA;QACI,aAAa;QACb;QACA;QACA;;IAGJ,SAAA,qBAAA;QACI,EAAE,gBAAgB,KAAK,YAAA;YACnB,IAAI,OAAO,EAAE,MAAM,KAAK;YACxB,IAAI,SAAS,EAAE,MAAM;YAErB,IAAI,aAAa,SAAS,iBAAiB,MAAM,YAAY,OAAO;gBAChE;;YAGJ,yBAAyB;YAEzB,cAAc,MAAM;YACpB,gBAAgB,QAAQ;YACxB,uBAAuB,MAAM;;;IAIrC,SAAA,yBAAkC,MAAI;QAClC,IAAI,WAAW,UAAU,WAAW;YAChC,WAAW,QAAQ;;;IAI3B,SAAA,cAAuB,SAAS,MAAI;QAChC,WAAW,MAAM,OAAO,UAAU;;IAGtC,SAAA,gBAAyB,QAAQ,MAAI;QACjC,WAAW,MAAM,SAAS;;IAG9B,SAAA,uBAAgC,SAAS,MAAI;QACzC,IAAI,aAAa,EAAE,SAAS,KAAK;QACjC,IAAI,eAAe,WAAW;YAC1B;;QAGJ,IAAI,oBAAoB,YAAY,OAAO;YACvC,WAAW,MAAM,aAAa;;;IAItC,SAAA,oBAA6B,YAAY,MAAI;QACzC,OAAO,sBAAsB,SAAS,+CAA+C,YAAY;;IAGrG,SAAA,+CAAwD,YAAY,MAAI;QACpE,IAAI,oBAAoB,WAAW,MAAM;QACzC,OAAO,uBAAuB,qBAAqB,uBAAuB;;IAG9E,SAAA,uBAAgC,YAAU;QACtC,IAAI,kBAAkB,CAAC,MAAM,MAAM,MAAM;QACzC,IAAI,aAAa,CAAC,GAAG,KAAK,KAAK;QAE/B,IAAI,mBAAmB,gBAAgB,QAAQ;QAC/C,OAAO,WAAW;;IAGtB,SAAA,sBAA+B,MAAI;QAC/B,OAAO,WAAW,MAAM,eAAe;;IAG3C,SAAA,uBAAA;QACI,EAAE,gBAAgB,IAAI,UAAU;;IAGpC,SAAA,oBAAA;QACI,QAAQ,QAAQ,YAAY,UAAS,OAAO,MAAI;YAC5C,IAAI,qCAAqC,OAAO;gBAC5C,EAAE,iBAAiB,OAAO,KAAK,OAAO,WAAW,MAAM;gBACvD,QAAQ,IAAI,WAAW,MAAM;;;;IAKzC,SAAA,qCAA8C,MAAI;QAC9C,IAAI,oBAAoB,WAAW,MAAM;QACzC,IAAI,sBAAsB,WAAW;YACjC,OAAO;;QAGX,OAAO,0BAA0B;;IAGrC,SAAA,0BAAmC,mBAAiB;QAChD,IAAI,eAAe,uBAAuB;QAC1C,OAAO,OAAO,WAAW,iBAAiB,eAAe,OAAO;;IAGpE,SAAA,iBAA0B,MAAM,QAAM;QAClC,IAAI,WAAW,UAAU,WAAW;YAChC,OAAO;;QAEX,OAAO,WAAW,MAAM,SAAS,SAAS,WAAW,MAAM,UAAU;;IAGzE,SAAA,UAAmB,SAAO;QACtB,OAAO,EAAE,SAAS,GAAG;;IAGzB,SAAA,aAAsB,SAAO;QACzB,OAAO,UAAU,aAAa;;;ACxB1C","file":"sameHeight.js","sourcesContent":["'use strict';\n\nangular.module('pwobapp')\n    .directive('sameheight', function() {\n        let sameheight = {};\n        let timeout;\n\n        $(window).resize(updateAllHeightsWhenReady);\n\n        return {\n            restrict: 'A',\n            link: function () {\n                updateAllHeightsWhenReady();\n            }\n        };\n\n        function updateAllHeightsWhenReady() {\n            clearTimeout(timeout);\n            timeout = setTimeout(updateAllHeights, 50);\n        }\n\n        function updateAllHeights() {\n            sameheight = {};\n            removeElementHeights();\n            scanElementHeights();\n            setElementHeights();\n        }\n\n        function scanElementHeights() {\n            $('[sameheight]').each(function() {\n                let name = $(this).attr('sameheight');\n                let height = $(this).height();\n\n                if (isNotTheMain(this) && isFirstOrBiggest(name, height) === false) {\n                    return;\n                }\n\n                initializeObjectIfNeeded(name);\n\n                setObjectMain(this, name);\n                setObjectHeight(height, name);\n                setObjectMinResolution(this, name);\n            });\n        }\n\n        function initializeObjectIfNeeded(name) {\n            if (sameheight[name] === undefined) {\n                sameheight[name] = {};\n            }\n        }\n\n        function setObjectMain(element, name) {\n            sameheight[name].main = isTheMain(element);\n        }\n\n        function setObjectHeight(height, name) {\n            sameheight[name].height = height;\n        }\n\n        function setObjectMinResolution(element, name) {\n            let resolution = $(element).data('sameheight-resolution');\n            if (resolution === undefined) {\n                return;\n            }\n\n            if (mayUpdateResolution(resolution, name)) {\n                sameheight[name].resolution = resolution;\n            }\n        }\n\n        function mayUpdateResolution(resolution, name) {\n            return hasNoSettedResolution(name) || settedResolutionIsBiggestThanThisResolutionFor(resolution, name);\n        }\n\n        function settedResolutionIsBiggestThanThisResolutionFor(resolution, name) {\n            let setted_resolution = sameheight[name].resolution;\n            return parseResolutionToWidth(setted_resolution) > parseResolutionToWidth(resolution);\n        }\n\n        function parseResolutionToWidth(resolution) {\n            let resolution_list = ['xs', 'sm', 'md', 'lg'];\n            let width_list = [0, 768, 992, 1200];\n\n            let resolution_index = resolution_list.indexOf(resolution);\n            return width_list[resolution_index];\n        }\n\n        function hasNoSettedResolution(name) {\n            return sameheight[name].resolution === undefined;\n        }\n\n        function removeElementHeights() {\n            $('[sameheight]').css('height', 'auto');\n        }\n\n        function setElementHeights() {\n            angular.forEach(sameheight, function(value, name) {\n                if (mayUpdateResolutionForThisResolution(name)) {\n                    $('[sameheight=' + name + ']').height(sameheight[name].height);\n                    console.log(sameheight[name].height);\n                }\n            });\n        }\n\n        function mayUpdateResolutionForThisResolution(name) {\n            let setted_resolution = sameheight[name].resolution;\n            if (setted_resolution === undefined) {\n                return true;\n            }\n\n            return thisResolutionBiggestThan(setted_resolution);\n        }\n\n        function thisResolutionBiggestThan(setted_resolution) {\n            let setted_width = parseResolutionToWidth(setted_resolution);\n            return window.matchMedia(\"(min-width: \" + setted_width + \"px)\").matches;\n        }\n\n        function isFirstOrBiggest(name, height) {\n            if (sameheight[name] === undefined) {\n                return true;\n            }\n            return sameheight[name].main === false && sameheight[name].height <= height;\n        }\n\n        function isTheMain(element) {\n            return $(element).is('[data-sameheight-main]');\n        }\n\n        function isNotTheMain(element) {\n            return isTheMain(element) === false;\n        }\n    });\n","'use strict';\nangular.module('pwobapp')\n    .directive('sameheight', function () {\n    var sameheight = {};\n    var timeout;\n    $(window).resize(updateAllHeightsWhenReady);\n    return {\n        restrict: 'A',\n        link: function () {\n            updateAllHeightsWhenReady();\n        }\n    };\n    function updateAllHeightsWhenReady() {\n        clearTimeout(timeout);\n        timeout = setTimeout(updateAllHeights, 50);\n    }\n    function updateAllHeights() {\n        sameheight = {};\n        removeElementHeights();\n        scanElementHeights();\n        setElementHeights();\n    }\n    function scanElementHeights() {\n        $('[sameheight]').each(function () {\n            var name = $(this).attr('sameheight');\n            var height = $(this).height();\n            if (isNotTheMain(this) && isFirstOrBiggest(name, height) === false) {\n                return;\n            }\n            initializeObjectIfNeeded(name);\n            setObjectMain(this, name);\n            setObjectHeight(height, name);\n            setObjectMinResolution(this, name);\n        });\n    }\n    function initializeObjectIfNeeded(name) {\n        if (sameheight[name] === undefined) {\n            sameheight[name] = {};\n        }\n    }\n    function setObjectMain(element, name) {\n        sameheight[name].main = isTheMain(element);\n    }\n    function setObjectHeight(height, name) {\n        sameheight[name].height = height;\n    }\n    function setObjectMinResolution(element, name) {\n        var resolution = $(element).data('sameheight-resolution');\n        if (resolution === undefined) {\n            return;\n        }\n        if (mayUpdateResolution(resolution, name)) {\n            sameheight[name].resolution = resolution;\n        }\n    }\n    function mayUpdateResolution(resolution, name) {\n        return hasNoSettedResolution(name) || settedResolutionIsBiggestThanThisResolutionFor(resolution, name);\n    }\n    function settedResolutionIsBiggestThanThisResolutionFor(resolution, name) {\n        var setted_resolution = sameheight[name].resolution;\n        return parseResolutionToWidth(setted_resolution) > parseResolutionToWidth(resolution);\n    }\n    function parseResolutionToWidth(resolution) {\n        var resolution_list = ['xs', 'sm', 'md', 'lg'];\n        var width_list = [0, 768, 992, 1200];\n        var resolution_index = resolution_list.indexOf(resolution);\n        return width_list[resolution_index];\n    }\n    function hasNoSettedResolution(name) {\n        return sameheight[name].resolution === undefined;\n    }\n    function removeElementHeights() {\n        $('[sameheight]').css('height', 'auto');\n    }\n    function setElementHeights() {\n        angular.forEach(sameheight, function (value, name) {\n            if (mayUpdateResolutionForThisResolution(name)) {\n                $('[sameheight=' + name + ']').height(sameheight[name].height);\n                console.log(sameheight[name].height);\n            }\n        });\n    }\n    function mayUpdateResolutionForThisResolution(name) {\n        var setted_resolution = sameheight[name].resolution;\n        if (setted_resolution === undefined) {\n            return true;\n        }\n        return thisResolutionBiggestThan(setted_resolution);\n    }\n    function thisResolutionBiggestThan(setted_resolution) {\n        var setted_width = parseResolutionToWidth(setted_resolution);\n        return window.matchMedia(\"(min-width: \" + setted_width + \"px)\").matches;\n    }\n    function isFirstOrBiggest(name, height) {\n        if (sameheight[name] === undefined) {\n            return true;\n        }\n        return sameheight[name].main === false && sameheight[name].height <= height;\n    }\n    function isTheMain(element) {\n        return $(element).is('[data-sameheight-main]');\n    }\n    function isNotTheMain(element) {\n        return isTheMain(element) === false;\n    }\n});\n"]}